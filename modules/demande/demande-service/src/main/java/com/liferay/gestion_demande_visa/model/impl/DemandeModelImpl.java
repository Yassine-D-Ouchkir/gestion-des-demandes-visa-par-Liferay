/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.gestion_demande_visa.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.gestion_demande_visa.model.Demande;
import com.liferay.gestion_demande_visa.model.DemandeModel;
import com.liferay.gestion_demande_visa.model.DemandeSoap;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Demande service. Represents a row in the &quot;GDV_Demande&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>DemandeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DemandeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DemandeImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DemandeModelImpl
	extends BaseModelImpl<Demande> implements DemandeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a demande model instance should use the <code>Demande</code> interface instead.
	 */
	public static final String TABLE_NAME = "GDV_Demande";

	public static final Object[][] TABLE_COLUMNS = {
		{"demandeId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"destination", Types.VARCHAR}, {"visaType", Types.VARCHAR},
		{"tripDate", Types.TIMESTAMP}, {"tripPurpse", Types.VARCHAR},
		{"stayDuration", Types.VARCHAR}, {"passport", Types.BIGINT},
		{"photo", Types.BIGINT}, {"flightReservation", Types.BIGINT},
		{"statue", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("demandeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("destination", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visaType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tripDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("tripPurpse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stayDuration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("passport", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("photo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("flightReservation", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statue", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GDV_Demande (demandeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,destination VARCHAR(75) null,visaType VARCHAR(75) null,tripDate DATE null,tripPurpse VARCHAR(75) null,stayDuration VARCHAR(75) null,passport LONG,photo LONG,flightReservation LONG,statue VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table GDV_Demande";

	public static final String ORDER_BY_JPQL =
		" ORDER BY demande.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GDV_Demande.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long DEMANDEID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long STATUE_COLUMN_BITMASK = 4L;

	public static final long USERID_COLUMN_BITMASK = 8L;

	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Demande toModel(DemandeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Demande model = new DemandeImpl();

		model.setDemandeId(soapModel.getDemandeId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDestination(soapModel.getDestination());
		model.setVisaType(soapModel.getVisaType());
		model.setTripDate(soapModel.getTripDate());
		model.setTripPurpse(soapModel.getTripPurpse());
		model.setStayDuration(soapModel.getStayDuration());
		model.setPassport(soapModel.getPassport());
		model.setPhoto(soapModel.getPhoto());
		model.setFlightReservation(soapModel.getFlightReservation());
		model.setStatue(soapModel.getStatue());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Demande> toModels(DemandeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Demande> models = new ArrayList<Demande>(soapModels.length);

		for (DemandeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DemandeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _demandeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDemandeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _demandeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Demande.class;
	}

	@Override
	public String getModelClassName() {
		return Demande.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Demande, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Demande, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Demande, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Demande)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Demande, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Demande, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Demande)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Demande, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Demande, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Demande>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Demande.class.getClassLoader(), Demande.class, ModelWrapper.class);

		try {
			Constructor<Demande> constructor =
				(Constructor<Demande>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Demande, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Demande, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Demande, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Demande, Object>>();
		Map<String, BiConsumer<Demande, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Demande, ?>>();

		attributeGetterFunctions.put("demandeId", Demande::getDemandeId);
		attributeSetterBiConsumers.put(
			"demandeId", (BiConsumer<Demande, Long>)Demande::setDemandeId);
		attributeGetterFunctions.put("groupId", Demande::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Demande, Long>)Demande::setGroupId);
		attributeGetterFunctions.put("companyId", Demande::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Demande, Long>)Demande::setCompanyId);
		attributeGetterFunctions.put("userId", Demande::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Demande, Long>)Demande::setUserId);
		attributeGetterFunctions.put("createDate", Demande::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Demande, Date>)Demande::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Demande::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Demande, Date>)Demande::setModifiedDate);
		attributeGetterFunctions.put("destination", Demande::getDestination);
		attributeSetterBiConsumers.put(
			"destination",
			(BiConsumer<Demande, String>)Demande::setDestination);
		attributeGetterFunctions.put("visaType", Demande::getVisaType);
		attributeSetterBiConsumers.put(
			"visaType", (BiConsumer<Demande, String>)Demande::setVisaType);
		attributeGetterFunctions.put("tripDate", Demande::getTripDate);
		attributeSetterBiConsumers.put(
			"tripDate", (BiConsumer<Demande, Date>)Demande::setTripDate);
		attributeGetterFunctions.put("tripPurpse", Demande::getTripPurpse);
		attributeSetterBiConsumers.put(
			"tripPurpse", (BiConsumer<Demande, String>)Demande::setTripPurpse);
		attributeGetterFunctions.put("stayDuration", Demande::getStayDuration);
		attributeSetterBiConsumers.put(
			"stayDuration",
			(BiConsumer<Demande, String>)Demande::setStayDuration);
		attributeGetterFunctions.put("passport", Demande::getPassport);
		attributeSetterBiConsumers.put(
			"passport", (BiConsumer<Demande, Long>)Demande::setPassport);
		attributeGetterFunctions.put("photo", Demande::getPhoto);
		attributeSetterBiConsumers.put(
			"photo", (BiConsumer<Demande, Long>)Demande::setPhoto);
		attributeGetterFunctions.put(
			"flightReservation", Demande::getFlightReservation);
		attributeSetterBiConsumers.put(
			"flightReservation",
			(BiConsumer<Demande, Long>)Demande::setFlightReservation);
		attributeGetterFunctions.put("statue", Demande::getStatue);
		attributeSetterBiConsumers.put(
			"statue", (BiConsumer<Demande, String>)Demande::setStatue);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDemandeId() {
		return _demandeId;
	}

	@Override
	public void setDemandeId(long demandeId) {
		_columnBitmask |= DEMANDEID_COLUMN_BITMASK;

		if (!_setOriginalDemandeId) {
			_setOriginalDemandeId = true;

			_originalDemandeId = _demandeId;
		}

		_demandeId = demandeId;
	}

	public long getOriginalDemandeId() {
		return _originalDemandeId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getDestination() {
		if (_destination == null) {
			return "";
		}
		else {
			return _destination;
		}
	}

	@Override
	public void setDestination(String destination) {
		_destination = destination;
	}

	@JSON
	@Override
	public String getVisaType() {
		if (_visaType == null) {
			return "";
		}
		else {
			return _visaType;
		}
	}

	@Override
	public void setVisaType(String visaType) {
		_visaType = visaType;
	}

	@JSON
	@Override
	public Date getTripDate() {
		return _tripDate;
	}

	@Override
	public void setTripDate(Date tripDate) {
		_tripDate = tripDate;
	}

	@JSON
	@Override
	public String getTripPurpse() {
		if (_tripPurpse == null) {
			return "";
		}
		else {
			return _tripPurpse;
		}
	}

	@Override
	public void setTripPurpse(String tripPurpse) {
		_tripPurpse = tripPurpse;
	}

	@JSON
	@Override
	public String getStayDuration() {
		if (_stayDuration == null) {
			return "";
		}
		else {
			return _stayDuration;
		}
	}

	@Override
	public void setStayDuration(String stayDuration) {
		_stayDuration = stayDuration;
	}

	@JSON
	@Override
	public long getPassport() {
		return _passport;
	}

	@Override
	public void setPassport(long passport) {
		_passport = passport;
	}

	@JSON
	@Override
	public long getPhoto() {
		return _photo;
	}

	@Override
	public void setPhoto(long photo) {
		_photo = photo;
	}

	@JSON
	@Override
	public long getFlightReservation() {
		return _flightReservation;
	}

	@Override
	public void setFlightReservation(long flightReservation) {
		_flightReservation = flightReservation;
	}

	@JSON
	@Override
	public String getStatue() {
		if (_statue == null) {
			return "";
		}
		else {
			return _statue;
		}
	}

	@Override
	public void setStatue(String statue) {
		_columnBitmask |= STATUE_COLUMN_BITMASK;

		if (_originalStatue == null) {
			_originalStatue = _statue;
		}

		_statue = statue;
	}

	public String getOriginalStatue() {
		return GetterUtil.getString(_originalStatue);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Demande.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Demande toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Demande>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DemandeImpl demandeImpl = new DemandeImpl();

		demandeImpl.setDemandeId(getDemandeId());
		demandeImpl.setGroupId(getGroupId());
		demandeImpl.setCompanyId(getCompanyId());
		demandeImpl.setUserId(getUserId());
		demandeImpl.setCreateDate(getCreateDate());
		demandeImpl.setModifiedDate(getModifiedDate());
		demandeImpl.setDestination(getDestination());
		demandeImpl.setVisaType(getVisaType());
		demandeImpl.setTripDate(getTripDate());
		demandeImpl.setTripPurpse(getTripPurpse());
		demandeImpl.setStayDuration(getStayDuration());
		demandeImpl.setPassport(getPassport());
		demandeImpl.setPhoto(getPhoto());
		demandeImpl.setFlightReservation(getFlightReservation());
		demandeImpl.setStatue(getStatue());

		demandeImpl.resetOriginalValues();

		return demandeImpl;
	}

	@Override
	public int compareTo(Demande demande) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), demande.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Demande)) {
			return false;
		}

		Demande demande = (Demande)obj;

		long primaryKey = demande.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		DemandeModelImpl demandeModelImpl = this;

		demandeModelImpl._originalDemandeId = demandeModelImpl._demandeId;

		demandeModelImpl._setOriginalDemandeId = false;

		demandeModelImpl._originalGroupId = demandeModelImpl._groupId;

		demandeModelImpl._setOriginalGroupId = false;

		demandeModelImpl._originalUserId = demandeModelImpl._userId;

		demandeModelImpl._setOriginalUserId = false;

		demandeModelImpl._setModifiedDate = false;

		demandeModelImpl._originalStatue = demandeModelImpl._statue;

		demandeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Demande> toCacheModel() {
		DemandeCacheModel demandeCacheModel = new DemandeCacheModel();

		demandeCacheModel.demandeId = getDemandeId();

		demandeCacheModel.groupId = getGroupId();

		demandeCacheModel.companyId = getCompanyId();

		demandeCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			demandeCacheModel.createDate = createDate.getTime();
		}
		else {
			demandeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			demandeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			demandeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		demandeCacheModel.destination = getDestination();

		String destination = demandeCacheModel.destination;

		if ((destination != null) && (destination.length() == 0)) {
			demandeCacheModel.destination = null;
		}

		demandeCacheModel.visaType = getVisaType();

		String visaType = demandeCacheModel.visaType;

		if ((visaType != null) && (visaType.length() == 0)) {
			demandeCacheModel.visaType = null;
		}

		Date tripDate = getTripDate();

		if (tripDate != null) {
			demandeCacheModel.tripDate = tripDate.getTime();
		}
		else {
			demandeCacheModel.tripDate = Long.MIN_VALUE;
		}

		demandeCacheModel.tripPurpse = getTripPurpse();

		String tripPurpse = demandeCacheModel.tripPurpse;

		if ((tripPurpse != null) && (tripPurpse.length() == 0)) {
			demandeCacheModel.tripPurpse = null;
		}

		demandeCacheModel.stayDuration = getStayDuration();

		String stayDuration = demandeCacheModel.stayDuration;

		if ((stayDuration != null) && (stayDuration.length() == 0)) {
			demandeCacheModel.stayDuration = null;
		}

		demandeCacheModel.passport = getPassport();

		demandeCacheModel.photo = getPhoto();

		demandeCacheModel.flightReservation = getFlightReservation();

		demandeCacheModel.statue = getStatue();

		String statue = demandeCacheModel.statue;

		if ((statue != null) && (statue.length() == 0)) {
			demandeCacheModel.statue = null;
		}

		return demandeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Demande, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Demande, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Demande, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Demande)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Demande, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Demande, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Demande, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Demande)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Demande>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _demandeId;
	private long _originalDemandeId;
	private boolean _setOriginalDemandeId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _destination;
	private String _visaType;
	private Date _tripDate;
	private String _tripPurpse;
	private String _stayDuration;
	private long _passport;
	private long _photo;
	private long _flightReservation;
	private String _statue;
	private String _originalStatue;
	private long _columnBitmask;
	private Demande _escapedModel;

}